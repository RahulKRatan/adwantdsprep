Java Topics & Resources

Comparator:
input1.compareTo(input2) {40,10,50,60,19}
+ve -> swaps elements
-ve -> doesn't swap
0 -> both are same


Reflection:
Reflection is a language's ability to inspect and dynamically call classes, methods, attributes, etc. at runtime.
    -https://docs.oracle.com/javase/tutorial/reflect/index.html
    -https://www.youtube.com/watch?v=elFmT_d_OYE

Design Patterns used in Spring framework:
    - Design pattern - https://howtodoinjava.com/design-patterns/structural/proxy-design-pattern/

Single vs Prototype beans
This means that once a singleton bean is initialized, the same instance will be reused throughout the application context.
Unlike singleton beans, Spring will provide you with a new instance of the prototype bean every-time the bean is requested.
    - https://nullbeans.com/prototype-vs-singleton-spring-beans-differences-and-uses/
    - https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/beans.html#beans-factory-scopes

IoC, DIP, DI, IoC container ( aim is to have loosely coupled design )
IoC, DIP - Design principles provide high level guidelines to design better software applications ( SOLID )
IoC - Factory, Abstract Factory , DI , Template method , Strategy patterns use IoC
The IoC principle suggests to invert the control. This means to delegate the control to another class. In other words, invert the dependency creation control from class A to another class
DIP - High-level modules should not depend on low-level modules. Both should depend on the abstraction. Abstractions should not depend on details. Details should depend on abstractions.
DI - Dependency Injection is a design pattern which implements the IoC principle to invert the creation of dependent objects.
IoC container - framework
    -https://www.tutorialsteacher.com/ioc/introduction


System design calculations : https://systemdesigntutorial.com/system-design/system-design-calculations

serialVersionUId -> This is required in cases where your class structure changes between serialization and deserialization. A changed class structure will cause the JVM to give an exception in the de-serializing process

Backtracking:
https://leetcode.com/problems/palindrome-partitioning/discuss/182307/Java:-Backtracking-Template-General-Approach
https://leetcode.com/problems/subsets/discuss/187733/BackTrack-Template-Make-backtracking-Easy!!!
https://leetcode.com/problems/permutations/discuss/18239/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partioning)
https://labuladong.gitbook.io/algo-en/i.-dynamic-programming
https://www.cs.usfca.edu/~galles/visualization/Algorithms.html

DP:
https://leetcode.com/discuss/general-discussion/494279/comprehensive-data-structure-and-algorithm-study-guide
https://www.thealgorists.com/Algo/DynamicProgramming
https://leetcode.com/discuss/general-discussion/592146/dynamic-programming-summary
https://leetcode.com/discuss/general-discussion/662866/dp-for-beginners-problems-patterns-sample-solutions
https://jeffe.cs.illinois.edu/teaching/algorithms/book/03-dynprog.pdf
